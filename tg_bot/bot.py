import datetime
import json
import telebot
from render_template import render_template

from config import TOKEN
from keyboards import main_keyboard, document_state_keyboard
from soap.connect_to_1c import get_soap_client

bot = telebot.TeleBot(TOKEN)

LOG_PATH = '../logs/bot_log.txt'

HELP = '''
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/help - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
üöö –í–µ—Ä–Ω—É—Ç—å —Ä–µ–π—Å  - –≤–µ—Ä–Ω—É—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–π—Å –Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω—É—é –∏–ª–∏ –≤ –ø–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
'''


def bot_send_message(chat_id, text, parse_mode=None, reply_markup=None):
    try:
        return bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception as ex:
        with open(LOG_PATH, 'a') as file_log:
            str_log = f'{datetime.datetime.now()} | chat_id: {chat_id} ex: {ex} \n'
            file_log.write(str_log)


@bot.message_handler(commands=['start'])
def start(message):
    soap_client = get_soap_client()
    text = soap_client.FindUser(message.chat.id)
    dict_rez = json.loads(text)
    if dict_rez["Status"] == 'Error':
        bot_send_message(message.chat.id,
                         f"{dict_rez['Text']} –°–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–π ID {message.chat.id} –≤ –æ—Ç–¥–µ–ª –ò–¢ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        send_message = f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {dict_rez['Text']}</b>\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É." \
                       f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞: /start –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."
        bot_send_message(message.chat.id, send_message, parse_mode='html', reply_markup=main_keyboard)


@bot.message_handler(commands=["help"])
def send_help(message):
    text = f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.first_name}.</b>' + HELP
    bot_send_message(message.chat.id, text, parse_mode='html')


@bot.message_handler(func=lambda msg: msg.text == 'üöö –í–µ—Ä–Ω—É—Ç—å —Ä–µ–π—Å')
def change_document_state(message):
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!'
    msg = bot_send_message(message.chat.id, text)
    bot.register_next_step_handler(msg, process_doc_number)


def process_doc_number(message):
    doc_number = message.text

    if doc_number.isdigit():
        soap_client = get_soap_client()
        text = soap_client.DocumentState(doc_number)
        dict_rez = json.loads(text)
        if dict_rez["Status"] == 'Error':
            bot_send_message(message.chat.id, dict_rez['Text'], parse_mode='html', reply_markup=main_keyboard)
        else:
            doc_stat_dict = dict_rez['StateList']
            text = render_template("doc_state.html", doc_stat_dict=doc_stat_dict)
            msg = bot_send_message(message.chat.id, text, parse_mode='html', reply_markup=document_state_keyboard)
            bot.register_next_step_handler(msg, process_change_state, doc_number)
    else:
        text = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–π—Å—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!'
        msg = bot_send_message(message.chat.id, text)
        bot.register_next_step_handler(msg, process_doc_number)


def process_change_state(message, doc_number):
    state = ''
    if message.text == 'üîö Ô∏è–û—Ç–º–µ–Ω–∞':
        text = '–†–µ–π—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
        bot_send_message(message.chat.id, text, parse_mode='html', reply_markup=main_keyboard)
    elif message.text == 'üñ®Ô∏è  –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤':
        state = '–ü–æ–≥—Ä—É–∑–∫–∞'
    elif message.text == '‚û°Ô∏è–ü—Ä–æ—Ö–æ–¥–Ω–∞—è':
        state = '–ü—Ä–æ—Ö–æ–¥–Ω–∞—è'

    if state:
        soap_client = get_soap_client()
        text = soap_client.ChangeDocumentState(state, doc_number)
        dict_rez = json.loads(text)
        if dict_rez["Status"] == 'Error':
            bot_send_message(message.chat.id, dict_rez['Text'], parse_mode='html', reply_markup=main_keyboard)
        else:
            doc_stat_dict = dict_rez['StateList']
            bot_send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ - {state}', parse_mode='html',
                             reply_markup=main_keyboard)
            text = render_template("doc_state.html", doc_stat_dict=doc_stat_dict)
            bot_send_message(message.chat.id, text, parse_mode='html', reply_markup=main_keyboard)


if __name__ == '__main__':
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
